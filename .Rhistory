I40 = list(val = 137.84, sigma = 6.89),
I100 = list(val = 26.34, sigma = 1.317),
I200 = list(val = 0.68, sigma = 0.034),
I300 = list(val = 29.55, sigma = 1.48),
I350 = list(val = 68.89, sigma = 3.44),
R25 = list(val = 125.12, sigma = 6.26),
R40 = list(val = 256.80, sigma = 12.84),
R100 = list(val = 538.99, sigma = 26.95),
R200 = list(val = 444.23, sigma = 22.21),
R300 = list(val = 371.08, sigma = 15.85),
R350 = list(val = 549.42, sigma = 27.47)
)
chosen_params <- list(b = 1/(76*365), mu = 1/(76*365), beta1 = 0.214,
beta2 = 0.107, beta3 = 0.428, sigma = 1/7, alpha = 1/50, gamma = 1/14, omega = 1/365)
initial_points <- setNames(data.frame(t(apply(initial_LHS, 1,
function(x) x*unlist(lapply(ranges, function(x) x[2]-x[1])) +
unlist(lapply(ranges, function(x) x[1]))))), names(ranges))
library(randomLHS)
install.packages("randomLHS")
install.packages("randomLHS")
install.packages("lhs")
library(lhs)
initial_points <- setNames(data.frame(t(apply(initial_LHS, 1,
function(x) x*unlist(lapply(ranges, function(x) x[2]-x[1])) +
unlist(lapply(ranges, function(x) x[1]))))), names(ranges))
library(hmer)
??initial_LHS
?initial_LHS
library(hmer)
library(deSolve)
library(ggplot2)
library(reshape2)
library(purrr)
library(tidyverse)
set.seed(123)
ode_results <- function(parms, end_time = 365*2) {
forcer = matrix(c(0, parms['beta1'], 100, parms['beta2'], 180, parms['beta2'], 270, parms['beta3']), ncol = 2, byrow = TRUE)
force_func = approxfun(x = forcer[,1], y = forcer[,2], method = "linear", rule = 2)
des = function(time, state, parms) {
with(as.list(c(state, parms)), {
dS <- b*(S+E+I+R)-force_func(time)*I*S/(S+E+I+R) + omega*R - mu*S
dE <- force_func(time)*I*S/(S+E+I+R) - sigma*E - mu*E
dI <- sigma*E - alpha*I - gamma*I - mu*I
dR <- gamma*I - omega*R - mu*R
return(list(c(dS, dE, dI, dR)))
})
}
yini = c(S = 900, E = 100, I = 0, R = 0)
times = seq(0, end_time, by = 1)
out = deSolve::ode(yini, times, des, parms)
return(out)
}
get_results <- function(params, times, outputs) {
t_max <- max(times)
all_res <- ode_results(params, t_max)
actual_res <- all_res[all_res[,'time'] %in% times, c('time', outputs)]
shaped <- reshape2::melt(actual_res[,outputs])
return(setNames(shaped$value, paste0(shaped$Var2, actual_res[,'time'], sep = "")))
}
ranges = list(
b = c(1e-5, 1e-4), # birth rate
mu = c(1e-5, 1e-4), # rate of death from other causes
beta1 = c(0.2, 0.3), # infection rate at time t=0
beta2 = c(0.1, 0.2), # infection rates at time t=100
beta3 = c(0.3, 0.5), # infection rates at time t=270
sigma = c(0.07, 0.21), # rate of becoming infectious after infection
alpha = c(0.01, 0.025), # rate of death from the disease
gamma = c(0.05, 0.08), # recovery rate
omega = c(0.002, 0.004) # rate at which immunity is lost following recovery
)
targets <- list(
I25 = list(val = 115.88, sigma = 5.79),
I40 = list(val = 137.84, sigma = 6.89),
I100 = list(val = 26.34, sigma = 1.317),
I200 = list(val = 0.68, sigma = 0.034),
I300 = list(val = 29.55, sigma = 1.48),
I350 = list(val = 68.89, sigma = 3.44),
R25 = list(val = 125.12, sigma = 6.26),
R40 = list(val = 256.80, sigma = 12.84),
R100 = list(val = 538.99, sigma = 26.95),
R200 = list(val = 444.23, sigma = 22.21),
R300 = list(val = 371.08, sigma = 15.85),
R350 = list(val = 549.42, sigma = 27.47)
)
chosen_params <- list(b = 1/(76*365), mu = 1/(76*365), beta1 = 0.214,
beta2 = 0.107, beta3 = 0.428, sigma = 1/7, alpha = 1/50, gamma = 1/14, omega = 1/365)
initial_LHS <- lhs::randomLHS(180, 9)
initial_points <- setNames(data.frame(t(apply(initial_LHS, 1,
function(x) x*unlist(lapply(ranges, function(x) x[2]-x[1])) +
unlist(lapply(ranges, function(x) x[1]))))), names(ranges))
initial_results <- setNames(data.frame(t(apply(initial_points, 1, get_results,
c(25, 40, 100, 200, 300, 350), c('I', 'R')))), names(targets))
wave0 <- cbind(initial_points, initial_results)
t_sample <- sample(1:nrow(wave0), 90)
training <- wave0[t_sample,]
validation <- wave0[-t_sample,]
ems_wave1 <- emulator_from_data(training, names(targets), ranges,
c_lengths= rep(0.75,length(targets)))
ems_wave1 <- emulator_from_data(training, names(targets), ranges,
c_lengths= rep(0.55,length(targets)))
op <- par(mfrow = c(1, 3))
cd <- comparison_diag(ems_wave1$R200, validation = validation, targets = targets)
ce <- classification_diag(ems_wave1$R200, validation = validation, targets =targets)
se <- standard_errors(ems_wave1$R200, validation = validation, targets = targets)
par(op)
sigmadoubled_emulator <- ems_wave1$R200$mult_sigma(1.1)
op <- par(mfrow = c(1, 3))
cd <- comparison_diag(sigmadoubled_emulator, validation = validation, targets = targets)
ce <- classification_diag(sigmadoubled_emulator, validation = validation, targets = targets)
se <- standard_errors(sigmadoubled_emulator, validation = validation, targets = targets)
par(op)
vd <- validation_diagnostics(ems_wave1, validation = validation, targets = targets)
inflations <- c(1.1,1.1,1.1,1.1,2,1.1,2,1.1,1.1,1.1,2,1.1)
for (i in 1:length(ems_wave1)) {
ems_wave1[[i]] <- ems_wave1[[i]]$mult_sigma(inflations[[i]])
}
vd <- validation_diagnostics(ems_wave1, validation = validation, targets = targets)
ems_wave1 <- emulator_from_data(training, names(targets), ranges,
c_lengths= rep(0.55,length(targets)))
op <- par(mfrow = c(1, 3))
cd <- comparison_diag(ems_wave1$R200, validation = validation, targets = targets)
ce <- classification_diag(ems_wave1$R200, validation = validation, targets =targets)
se <- standard_errors(ems_wave1$R200, validation = validation, targets = targets)
par(op)
vd <- validation_diagnostics(ems_wave1, validation = validation, targets = targets)
inflations <- c(1.5,1.5,2,2,1.5,2,2,1.5,1,1.3,2,2)
for (i in 1:length(ems_wave1)) {
ems_wave1[[i]] <- ems_wave1[[i]]$mult_sigma(inflations[[i]])
}
vd <- validation_diagnostics(ems_wave1, validation = validation, targets = targets)
ems_wave1 <- emulator_from_data(training, names(targets), ranges,
c_lengths= rep(0.55,length(targets)))
inflations <- c(1.5,1.5,2,1.5,2,1.5,2,1.5,1,1.3,2,2)
for (i in 1:length(ems_wave1)) {
ems_wave1[[i]] <- ems_wave1[[i]]$mult_sigma(inflations[[i]])
}
vd <- validation_diagnostics(ems_wave1, validation = validation, targets = targets)
devtools::install_github("Tandethsquire/hmer")
devtools::install_github("Tandethsquire/hmer", INSTALL_opts=c("--no-multiarch")
devtools::install_github("Tandethsquire/hmer", INSTALL_opts=c("--no-multiarch"))
packageVersion("hmer")
library(hmer)
packageVersion(hmer)
packageVersion("hmer")
?comparison_diag
?wave_values
devtools::install_github("Tandethsquire/hmer", INSTALL_opts=c("--no-multiarch"))
packageVersion("hmer")
library(hmer)
packageVersion("hmer")
??directional_deriv
??generate_new_runs
?emula
?emulator_from_data
git checkout master
105*7/115
??generate_new_runs
10000/3600
install.packages("hmer")
packageVersion("hmer")
library(hmer)
library(deSolve)
library(ggplot2)
library(reshape2)
library(purrr)
library(tidyverse)
set.seed(123)
# Define the helper function `ode_results`, to obtain the solution of the ODEs at any given parameter set.
ode_results <- function(parms, end_time = 365*2) {
forcer = matrix(c(0, parms['beta1'], 100, parms['beta2'], 180, parms['beta2'], 270, parms['beta3']),
ncol = 2, byrow = TRUE)
force_func = approxfun(x = forcer[,1], y = forcer[,2], method = "linear", rule = 2)
des = function(time, state, parms) {
with(as.list(c(state, parms)), {
dS <- b*(S+E+I+R)-force_func(time)*I*S/(S+E+I+R) + omega*R - mu*S
dE <- force_func(time)*I*S/(S+E+I+R) - sigma*E - mu*E
dI <- sigma*E - alpha*I - gamma*I - mu*I
dR <- gamma*I - omega*R - mu*R
return(list(c(dS, dE, dI, dR)))
})
}
yini = c(S = 900, E = 100, I = 0, R = 0)
times = seq(0, end_time, by = 1)
out = deSolve::ode(yini, times, des, parms)
return(out)
}
# Define the helper function `get_results` that acts as `ode_results`, but has the additional feature
# of allowing us to decide which outputs and times should be returned
get_results <- function(params, times, outputs) {
t_max <- max(times)
all_res <- ode_results(params, t_max)
actual_res <- all_res[all_res[,'time'] %in% times, c('time', outputs)]
shaped <- reshape2::melt(actual_res[,outputs])
return(setNames(shaped$value, paste0(shaped$Var2, actual_res[,'time'], sep = "")))
}
# Set some parameter values, run the model on them and plot the model output
example_params <- c(
b = 1/(60*365),
mu = 1/(76*365),
beta1 = 0.2, beta2 = 0.1, beta3 = 0.3,
sigma = 0.13,
alpha = 0.01,
gamma = 0.08,
omega = 0.003
)
solution <- ode_results(example_params)
par(mar = c(2, 2, 2, 2))
plot(solution)
# Increase the value of the force of infection parameters (beta 1 and beta 3), run the model, and plot the new
# solution on top of the previous one
higher_foi_params <- c(
b = 1/(60*365),
mu = 1/(76*365),
beta1 = 0.3, beta2 = 0.1, beta3 = 0.5,
sigma = 0.13,
alpha = 0.01,
gamma = 0.08,
omega = 0.003
)
higher_foi_solution <- ode_results(higher_foi_params)
plot(solution, higher_foi_solution)
# Increase the rate of becoming infectious (sigma), run the model, and plot the new solution on top of the previous one
higher_sigma_params <- c(
b = 1/(60*365),
mu = 1/(76*365),
beta1 = 0.3, beta2 = 0.1, beta3 = 0.5,
sigma = 0.21,
alpha = 0.01,
gamma = 0.08,
omega = 0.003
)
higher_sigma_solution <- ode_results(higher_sigma_params)
plot(higher_foi_solution,higher_sigma_solution)
# Decrease the recovery rate (gamma), run the model, and plot the new solution on top of the previous one
smaller_recovery_params <- c(
b = 1/(60*365),
mu = 1/(76*365),
beta1 = 0.3, beta2 = 0.1, beta3 = 0.5,
sigma = 0.21,
alpha = 0.01,
gamma = 0.05,
omega = 0.003
)
smaller_recovery_solution <- ode_results(smaller_recovery_params)
plot(higher_sigma_solution, smaller_recovery_solution)
# Define the parameter ranges
ranges = list(
b = c(1e-5, 1e-4), # birth rate
mu = c(1e-5, 1e-4), # rate of death from other causes
beta1 = c(0.2, 0.3), # infection rate from time t=0
beta2 = c(0.1, 0.2), # infection rate from time t=100
beta3 = c(0.3, 0.5), # infection rate from time t=270
sigma = c(0.07, 0.21), # rate of becoming infectious after infection
alpha = c(0.01, 0.025), # rate of death from the disease
gamma = c(0.05, 0.08), # recovery rate
omega = c(0.002, 0.004) # rate at which immunity is lost following recovery
)
# Define the targets' mean values and standard deviations
targets <- list(
I25 = list(val = 115.88, sigma = 5.79),
I40 = list(val = 137.84, sigma = 6.89),
I100 = list(val = 26.34, sigma = 1.317),
I200 = list(val = 0.68, sigma = 0.034),
I300 = list(val = 29.55, sigma = 1.48),
I350 = list(val = 68.89, sigma = 3.44),
R25 = list(val = 125.12, sigma = 6.26),
R40 = list(val = 256.80, sigma = 12.84),
R100 = list(val = 538.99, sigma = 26.95),
R200 = list(val = 444.23, sigma = 22.21),
R300 = list(val = 371.08, sigma = 15.85),
R350 = list(val = 549.42, sigma = 27.47)
)
# The parameter set below was used to determine the targets. The model was run on it and the outputs taken to
# be the mean value of the targets. The standard deviations were defined as 5% of the corresponding mean value.
chosen_params <- list(b = 1/(76*365), mu = 1/(76*365), beta1 = 0.214,
beta2 = 0.107, beta3 = 0.428, sigma = 1/7, alpha = 1/50, gamma = 1/14, omega = 1/365)
# Define a Latin hypercube design through the function `randomLHS`. This function assumes that each parameter
# is distributed on [0,1]
initial_LHS <- lhs::randomLHS(180, 9)
# Rescale the parameter ranges from [0,1] to the correct ranges, and add columns names to identify the parameters
initial_points <- setNames(data.frame(t(apply(initial_LHS, 1,
function(x) x*unlist(lapply(ranges, function(x) x[2]-x[1])) +
unlist(lapply(ranges, function(x) x[1]))))), names(ranges))
# Run the model on `initial_points` and add column names to identify the different targets
initial_results <- setNames(data.frame(t(apply(initial_points, 1, get_results,
c(25, 40, 100, 200, 300, 350), c('I', 'R')))), names(targets))
# Bind `initial_points` and the corresponding model outputs `initial_results` by column
wave0 <- cbind(initial_points, initial_results)
# Split the dataframe `wave0` into a training and a validation set
t_sample <- sample(1:nrow(wave0), 90)
training <- wave0[t_sample,]
validation <- wave0[-t_sample,]
# Train the first set of emulators using the function `emulator_from_data`
ems_wave1 <- emulator_from_data(training, names(targets), ranges,
c_lengths= rep(0.55,length(targets)))
# Show the emulator specification for the number of recovered people at t=200
ems_wave1$R200
# Plot the emulator expectation for the number of recovered people at t=200 in the (beta1,gamma)-plane
emulator_plot(ems_wave1$R200, params = c('beta1', 'gamma'))
# Show what variables are active for the emulator of the number of recovered people at t=200
ems_wave1$R200$active_vars
# Shows whether beta_3, the fifth parameter, is active
ems_wave1$R200$active_vars[5]
# Loop through `ems_wave1` to look at the role of beta_3 in each of the emulators
beta3_role <- logical()
for (i in 1:length(ems_wave1)) beta3_role[i] <- ems_wave1[[i]]$active_vars[5]
names(beta3_role) <- names(ems_wave1)
beta3_role
# Produce a plot showing what variables are active for different emulators, using the function `plot_actives`
plot_actives(ems_wave1)
# Plot the emulation variance for the number of recovered people at t=200 in the (beta1,gamma)-plane
emulator_plot(ems_wave1$R200, plot_type = 'var', params = c('beta1', 'gamma'))
# Examine the adjusted R^2 squared of the regression hypersurface for the number of recovered people at t=200
summary(ems_wave1$R200$model)$adj.r.squared
#Plot the emulator implausibility for the number of recovered people at t=200 in the (beta1,gamma)-plane
emulator_plot(ems_wave1$R200, plot_type = 'imp',
targets = targets, params = c('beta1', 'gamma'), cb=TRUE)
# Plot the emulator implausibility for all emulators in the (beta1,gamma)-plane
emulator_plot(ems_wave1, plot_type = 'imp',
targets = targets, params = c('beta1', 'gamma'), cb=TRUE)
# Visualise the maximum implausibility passing all emulators to `emulator_plot` and setting `plot_type='nimp'`
emulator_plot(ems_wave1, plot_type = 'nimp', targets = targets, params = c('beta1', 'gamma'), cb=T)
# Visualise the second-maximum implausibility adding nth=2 to the previous function call
emulator_plot(ems_wave1, plot_type = 'nimp', targets = targets, params = c('beta1', 'gamma'), cb=T, nth=2)
# Focus on early times outputs (up to $t=200$), and produce implausibility plots for them
restricted_ems <- ems_wave1[c(1,2,3,4,7,8,9,10)]
emulator_plot(restricted_ems, plot_type = 'imp', targets = targets, params = c('beta1', 'gamma'), cb=T)
# Set the unshown parameters to be as in `chosen_params`:
emulator_plot(restricted_ems, plot_type = 'nimp', targets = targets[c(1,2,3,4,7,8,9,10)],
params = c('beta1', 'gamma'),
fixed_vals = chosen_params[!names(chosen_params) %in% c('beta1', 'gamma')], cb=T)+
geom_point(aes(x=0.214, y=1/14), size=3)
# Produce three diagnostics of the emulator for the number of recovered people at t=200 using
#`validation_diagnostics`
vd <- validation_diagnostics(ems_wave1$R200, validation = validation, targets = targets, plt=TRUE)
# Double the value of sigma in the emulator for the number of recovered people at t=200
sigmadoubled_emulator <- ems_wave1$R200$mult_sigma(2)
# Produce the three diagnostics again
vd <- validation_diagnostics(sigmadoubled_emulator,
validation = validation, targets = targets, plt=TRUE)
# Set sigma to be 10 times smaller than its default value
tinysigma_emulator <- ems_wave1$R200$mult_sigma(0.1)
# Produce the three validation diagnostics
vd <- validation_diagnostics(tinysigma_emulator, validation = validation, targets = targets, plt=TRUE)
# Set sigma to be ten times larger than its default value
hugesigma_emulator <- ems_wave1$R200$mult_sigma(10)
# Produce the three validation diagnostics
vd <- validation_diagnostics(hugesigma_emulator, validation = validation, targets = targets, plt=TRUE)
# Generate 180 new parameter sets using `generate_new_runs`
new_points_restricted <- generate_new_runs(restricted_ems, 180, targets, verbose=TRUE)
# Plot the new parameter sets using `plot_wrap`
plot_wrap(new_points_restricted, ranges)
# Pass the list of wave 1 emulators to `generate_new_runs` and plot them using `plot_wrap`
new_points <- generate_new_runs(ems_wave1, 180, targets, verbose = TRUE)
plot_wrap(new_points, ranges)
# Pass the list of wave 1 emulators to `space_removed` to quantify how much of the input space has been cut out
space_removed(ems_wave1, targets, ppd=3) + geom_vline(xintercept = 3, lty = 2) +
geom_text(aes(x=3, label="x = 3",y=0.33), colour="black",
angle=90, vjust = 1.2, text=element_text(size=11))
# Produce diagnostics for all the emulators trained in wave 1
vd <- validation_diagnostics(ems_wave1, validation = validation, targets = targets, plt=TRUE)
# Define a vector indicating the factor by which each sigma should be multiplied
inflations <- c(1.5,1.5,2,1.5,2,1.5,2,1.5,1,1.3,2,2)
# Loop through the vector `inflations` and modify the sigma values of emulators
for (i in 1:length(ems_wave1)) {
ems_wave1[[i]] <- ems_wave1[[i]]$mult_sigma(inflations[[i]])
}
# Produce diagnostics for all the emulators trained in wave 1, with the modified sigmas
vd <- validation_diagnostics(ems_wave1, validation = validation, targets = targets, plt=TRUE)
# Generate 180 new parameter sets using the modified emulators and plot them
new_points <- generate_new_runs(ems_wave1, 180, targets, verbose = TRUE)
plot_wrap(new_points, ranges)
# Define new ranges for the parameters, by finding the smallest hyper-rectangle containing the non-implausible
# region found at the end of wave 1.
min_val <- list()
max_val <- list()
new_ranges <- list()
for (i in 1:length(ranges)) {
par <- names(ranges)[[i]]
min_val[[par]] <- max(min(new_points[,par])-0.05*diff(range(new_points[,par])),
ranges[[par]][1])
max_val[[par]] <- min(max(new_points[,par])+0.05*diff(range(new_points[,par])),
ranges[[par]][2])
new_ranges[[par]] <- c(min_val[[par]], max_val[[par]])
}
# Start by evaluating the function `get_results` on `new_points`
new_initial_results <- setNames(data.frame(t(apply(new_points, 1, get_results,
c(25, 40, 100, 200, 300, 350), c('I', 'R')))), names(targets))
# Bind by columns `new_points` to the model output `new_initial_results` to create the data.frame `wave1`
wave1 <- cbind(new_points, new_initial_results)
# Split `wave1` into training and validation sets
new_t_sample <- sample(1:nrow(wave1), 90)
new_training <- wave1[new_t_sample,]
new_validation <- wave1[-new_t_sample,]
# Train wave 2 emulators using `emulator_from_data`, passing the new ranges to it
ems_wave2 <- emulator_from_data(new_training, names(targets), new_ranges, c_lengths= rep(0.55,length(targets)))
vd <- validation_diagnostics(ems_wave2, validation = new_validation, targets = targets, plt=TRUE)
# Define a vector indicating the factor by which each sigma should be multiplied
inflations <- c(2,1,2,2,2,2,2,2,2,1,2,2)
for (i in 1:length(ems_wave2)) {
ems_wave2[[i]] <- ems_wave2[[i]]$mult_sigma(inflations[[i]])
}
# Produce diagnostics for the modified wave 2 emulators
vd <- validation_diagnostics(ems_wave2, validation =  new_validation, targets = targets, plt=TRUE)
# Generate 180 new parameter sets and plot them
new_new_points <- generate_new_runs(c(ems_wave2, ems_wave1), 180, targets, verbose=TRUE)
plot_wrap(new_new_points, ranges)
# Examine the adjusted R^2 squared of the regression hypersurface for all wave 2 emulators
R_squared_new <- list()
for (i in 1:length(ems_wave2)) {
R_squared_new[[i]] <- summary(ems_wave2[[i]]$model)$adj.r.squared
}
names(R_squared_new) <- names(ems_wave2)
unlist(R_squared_new)
# Train new wave 1 emulators, setting `quadratic=FALSE` to assume a linear regression term
ems_wave1_linear <- emulator_from_data(training, names(targets),
ranges, quadratic=FALSE, c_lengths= rep(0.55,length(targets)))
# Examine the adjusted R^2 squared of the linear regression hypersurface for these new emulators
R_squared_linear <- list()
for (i in 1:length(ems_wave1_linear)) {
R_squared_linear[[i]] <- summary(ems_wave1_linear[[i]]$model)$adj.r.squared
}
names(R_squared_linear) <- names(ems_wave1_linear)
unlist(R_squared_linear)
# Plot the emulator variance for the number of infectious people at t=200 in the (beta1,gamma)-plane
emulator_plot(ems_wave1_linear$I200, plot_type = 'var',
params = c('beta1', 'gamma'))
# Plot the emulator implausibility for the number of infectious people at t=200 in the (beta1,gamma)-plane
emulator_plot(ems_wave1_linear$I200, plot_type = 'imp', targets = targets,
params = c('beta1', 'gamma'), cb=TRUE)
# Increase theta by a factor of three in the linear emulator for the number of infectious people at t=200
ems_wave1_linear$I200 <- ems_wave1_linear$I20$set_hyperparams(
list(theta=ems_wave1_linear$I200$corr$hyper_p$theta *3))
# Plot the variance of the modified linear emulator for the number of infectious people at t=200 in the
# (beta1,gamma)-plane
emulator_plot(ems_wave1_linear$I200, plot_type = 'var',
params = c('beta1', 'gamma'))
# Plot the implausibility of the modified linear emulator for the number of infectious people at t=200 in
# the (beta1,gamma)-plane
emulator_plot(ems_wave1_linear$I200, plot_type = 'imp', targets = targets,
params = c('beta1', 'gamma'), cb=TRUE)
# Show the distribution of the non-implausible space before the wave 1, at the end of wave 1 and at the end of
# wave 2 using the function `wave_points`
wave_points(list(initial_points, new_points, new_new_points), input_names = names(ranges))
# Create a dataframe `wave2` binding the parameters sets generated at the end of wave 2 with the corresponding
# model outputs
new_new_initial_results <- setNames(data.frame(t(apply(new_new_points, 1,
get_results, c(25, 40, 100, 200, 300, 350),
c('I', 'R')))), names(targets))
wave2 <- cbind(new_new_points, new_new_initial_results)
# Assess how much better parameter sets at later waves perform compared to the original `initial_points` through
#`simulator_plot`
all_points <- list(wave0, wave1, wave2)
simulator_plot(all_points, targets)
# Set `normalize=TRUE` to rescale and uniformize the targets bounds in the plot
simulator_plot(all_points, targets, normalize = TRUE)
# Set `logscale=TRUE` to plot log-scaled target bounds
simulator_plot(all_points, targets, logscale = TRUE)
?wave_values
?wave_values
??wave_values
install.packages("hmer")
install.packages("hmer")
??wave_values
wave_values(all_points, targets)
for (i in 1:180) sol[[i]]<-ode_results(initial_points[i,])
sol <- list()
for (i in 1:180) sol[[i]]<-ode_results(initial_points[i,])
par(mar = c(3, 3, 3, 3))
plot(sol[[1]],sol[[2]],sol[[3]],sol[[4]],sol[[5]],sol[[6]],sol[[7]],sol[[8]],sol[[9]],sol[[10]],sol[[11]],sol[[12]],sol[[13]],sol[[14]],sol[[15]],sol[[16]],sol[[17]],sol[[18]],sol[[19]],sol[[20]],sol[[21]],sol[[22]],sol[[23]],sol[[24]],sol[[25]],sol[[26]],sol[[27]],sol[[28]],sol[[29]],sol[[30]],sol[[31]],sol[[32]],sol[[33]],sol[[34]],sol[[35]],sol[[36]],sol[[37]],sol[[38]],sol[[39]],sol[[40]],sol[[41]],sol[[42]],sol[[43]],sol[[44]],sol[[45]],sol[[46]],sol[[47]],sol[[48]],sol[[49]],sol[[50]],sol[[51]],sol[[52]],sol[[53]],sol[[54]],sol[[55]],sol[[56]],sol[[57]],sol[[58]],sol[[59]],sol[[60]],sol[[61]],sol[[62]],sol[[63]],sol[[64]],sol[[65]],sol[[66]],sol[[67]],sol[[68]],sol[[69]],sol[[70]],sol[[71]],sol[[72]],sol[[73]],sol[[74]],sol[[75]],sol[[76]],sol[[77]],sol[[78]],sol[[79]],sol[[80]],sol[[81]],sol[[82]],sol[[83]],sol[[84]],sol[[85]],sol[[86]],sol[[87]],sol[[88]],sol[[89]],sol[[90]],sol[[91]],sol[[92]],sol[[93]],sol[[94]],sol[[95]] ,sol[[96]],sol[[97]],sol[[98]],sol[[99]],sol[[100]],sol[[101]],sol[[102]],sol[[103]],sol[[104]],sol[[105]],sol[[106]],sol[[107]],sol[[108]],sol[[109]],sol[[110]],sol[[111]],  sol[[112]],sol[[113]],sol[[114]],sol[[115]] ,sol[[116]],sol[[117]],sol[[118]],sol[[119]],sol[[120]],sol[[121]],sol[[122]],sol[[123]],sol[[124]],sol[[125]],sol[[126]],sol[[127]],sol[[128]],sol[[129]],sol[[130]],sol[[131]],sol[[132]],sol[[133]],sol[[134]],sol[[135]],sol[[136]],sol[[137]],sol[[138]],sol[[139]],sol[[140]],sol[[141]],sol[[142]],sol[[143]],sol[[144]],sol[[145]],sol[[146]],sol[[147]],sol[[148]],sol[[149]],sol[[150]],sol[[151]],sol[[152]],sol[[153]],sol[[154]],sol[[155]],sol[[156]],sol[[157]],sol[[158]],sol[[159]],sol[[160]],sol[[161]],sol[[162]],sol[[163]],sol[[164]],sol[[165]],sol[[166]],sol[[167]],sol[[168]],sol[[169]],sol[[170]],sol[[171]],sol[[172]],sol[[173]],sol[[174]],sol[[175]],sol[[176]],sol[[177]],sol[[178]],sol[[179]],sol[[180]], main="wave0 model evaluations")
solafter <- list()
for (i in 1:180) solafter[[i]]<-ode_results(new_points[i,])
par(mar = c(3, 3, 3, 3))
plot(solafter[[1]],solafter[[2]],solafter[[3]],solafter[[4]],solafter[[5]],solafter[[6]],solafter[[7]],solafter[[8]],solafter[[9]],solafter[[10]],solafter[[11]],solafter[[12]],solafter[[13]],solafter[[14]],solafter[[15]],solafter[[16]],solafter[[17]],solafter[[18]],solafter[[19]],solafter[[20]],solafter[[21]],solafter[[22]],solafter[[23]],solafter[[24]],solafter[[25]],solafter[[26]],solafter[[27]],solafter[[28]],solafter[[29]],solafter[[30]],solafter[[31]],solafter[[32]],solafter[[33]],solafter[[34]],solafter[[35]],solafter[[36]],solafter[[37]],solafter[[38]],solafter[[39]],solafter[[40]],solafter[[41]],solafter[[42]],solafter[[43]],solafter[[44]],solafter[[45]],solafter[[46]],solafter[[47]],solafter[[48]],solafter[[49]],solafter[[50]],solafter[[51]],solafter[[52]],solafter[[53]],solafter[[54]],solafter[[55]],solafter[[56]],solafter[[57]],solafter[[58]],solafter[[59]],solafter[[60]],solafter[[61]],solafter[[62]],solafter[[63]],solafter[[64]],solafter[[65]],solafter[[66]],solafter[[67]],solafter[[68]],solafter[[69]],solafter[[70]],solafter[[71]],solafter[[72]],solafter[[73]],solafter[[74]],solafter[[75]],solafter[[76]],solafter[[77]],solafter[[78]],solafter[[79]],solafter[[80]],solafter[[81]],solafter[[82]],solafter[[83]],solafter[[84]],solafter[[85]],solafter[[86]],solafter[[87]],solafter[[88]],solafter[[89]],solafter[[90]],solafter[[91]],solafter[[92]],solafter[[93]],solafter[[94]],solafter[[95]] ,solafter[[96]],solafter[[97]],solafter[[98]],solafter[[99]],solafter[[100]],solafter[[101]],solafter[[102]],solafter[[103]],solafter[[104]],solafter[[105]],solafter[[106]],solafter[[107]],solafter[[108]],solafter[[109]],solafter[[110]],solafter[[111]],  solafter[[112]],solafter[[113]],solafter[[114]],solafter[[115]] ,solafter[[116]],solafter[[117]],solafter[[118]],solafter[[119]],solafter[[120]],solafter[[121]],solafter[[122]],solafter[[123]],solafter[[124]],solafter[[125]],solafter[[126]],solafter[[127]],solafter[[128]],solafter[[129]],solafter[[130]],solafter[[131]],solafter[[132]],solafter[[133]],solafter[[134]],solafter[[135]],solafter[[136]],solafter[[137]],solafter[[138]],solafter[[139]],solafter[[140]],solafter[[141]],solafter[[142]],solafter[[143]],solafter[[144]],solafter[[145]],solafter[[146]],solafter[[147]],solafter[[148]],solafter[[149]],solafter[[150]],solafter[[151]],solafter[[152]],solafter[[153]],solafter[[154]],solafter[[155]],solafter[[156]],solafter[[157]],solafter[[158]],solafter[[159]],solafter[[160]],solafter[[161]],solafter[[162]],solafter[[163]],solafter[[164]],solafter[[165]],solafter[[166]],solafter[[167]],solafter[[168]],solafter[[169]],solafter[[170]],solafter[[171]],solafter[[172]],solafter[[173]],solafter[[174]],solafter[[175]],solafter[[176]],solafter[[177]],solafter[[178]])
plot(sol[[1]],sol[[2]],sol[[3]],sol[[4]],sol[[5]],sol[[6]],sol[[7]],sol[[8]],sol[[9]],sol[[10]],solafter[[7]],solafter[[8]],solafter[[9]],solafter[[10]], lty=1, col=c("black","black","black","black","black","black","black","black","black","black","red","red","red","red","red"))
plot(sol[[1]],sol[[2]], solafter[[7]], col=c("blue","red","red"), lty=1)
plot(lty=1, col=c(rep("black",180),rep("red",178)), sol[[1]],sol[[2]],sol[[3]],sol[[4]],sol[[5]],sol[[6]],sol[[7]],sol[[8]],sol[[9]],sol[[10]],sol[[11]],sol[[12]],sol[[13]],sol[[14]],sol[[15]],sol[[16]],sol[[17]],sol[[18]],sol[[19]],sol[[20]],sol[[21]],sol[[22]],sol[[23]],sol[[24]],sol[[25]],sol[[26]],sol[[27]],sol[[28]],sol[[29]],sol[[30]],sol[[31]],sol[[32]],sol[[33]],sol[[34]],sol[[35]],sol[[36]],sol[[37]],sol[[38]],sol[[39]],sol[[40]],sol[[41]],sol[[42]],sol[[43]],sol[[44]],sol[[45]],sol[[46]],sol[[47]],sol[[48]],sol[[49]],sol[[50]],sol[[51]],sol[[52]],sol[[53]],sol[[54]],sol[[55]],sol[[56]],sol[[57]],sol[[58]],sol[[59]],sol[[60]],sol[[61]],sol[[62]],sol[[63]],sol[[64]],sol[[65]],sol[[66]],sol[[67]],sol[[68]],sol[[69]],sol[[70]],sol[[71]],sol[[72]],sol[[73]],sol[[74]],sol[[75]],sol[[76]],sol[[77]],sol[[78]],sol[[79]],sol[[80]],sol[[81]],sol[[82]],sol[[83]],sol[[84]],sol[[85]],sol[[86]],sol[[87]],sol[[88]],sol[[89]],sol[[90]],sol[[91]],sol[[92]],sol[[93]],sol[[94]],sol[[95]] ,sol[[96]],sol[[97]],sol[[98]],sol[[99]],sol[[100]],sol[[101]],sol[[102]],sol[[103]],sol[[104]],sol[[105]],sol[[106]],sol[[107]],sol[[108]],sol[[109]],sol[[110]],sol[[111]],  sol[[112]],sol[[113]],sol[[114]],sol[[115]] ,sol[[116]],sol[[117]],sol[[118]],sol[[119]],sol[[120]],sol[[121]],sol[[122]],sol[[123]],sol[[124]],sol[[125]],sol[[126]],sol[[127]],sol[[128]],sol[[129]],sol[[130]],sol[[131]],sol[[132]],sol[[133]],sol[[134]],sol[[135]],sol[[136]],sol[[137]],sol[[138]],sol[[139]],sol[[140]],sol[[141]],sol[[142]],sol[[143]],sol[[144]],sol[[145]],sol[[146]],sol[[147]],sol[[148]],sol[[149]],sol[[150]],sol[[151]],sol[[152]],sol[[153]],sol[[154]],sol[[155]],sol[[156]],sol[[157]],sol[[158]],sol[[159]],sol[[160]],sol[[161]],sol[[162]],sol[[163]],sol[[164]],sol[[165]],sol[[166]],sol[[167]],sol[[168]],sol[[169]],sol[[170]],sol[[171]],sol[[172]],sol[[173]],sol[[174]],sol[[175]],sol[[176]],sol[[177]],sol[[178]],sol[[179]],sol[[180]],solafter[[1]],solafter[[2]],solafter[[3]],solafter[[4]],solafter[[5]],solafter[[6]],solafter[[7]],solafter[[8]],solafter[[9]],solafter[[10]],solafter[[11]],solafter[[12]],solafter[[13]],solafter[[14]],solafter[[15]],solafter[[16]],solafter[[17]],solafter[[18]],solafter[[19]],solafter[[20]],solafter[[21]],solafter[[22]],solafter[[23]],solafter[[24]],solafter[[25]],solafter[[26]],solafter[[27]],solafter[[28]],solafter[[29]],solafter[[30]],solafter[[31]],solafter[[32]],solafter[[33]],solafter[[34]],solafter[[35]],solafter[[36]],solafter[[37]],solafter[[38]],solafter[[39]],solafter[[40]],solafter[[41]],solafter[[42]],solafter[[43]],solafter[[44]],solafter[[45]],solafter[[46]],solafter[[47]],solafter[[48]],solafter[[49]],solafter[[50]],solafter[[51]],solafter[[52]],solafter[[53]],solafter[[54]],solafter[[55]],solafter[[56]],solafter[[57]],solafter[[58]],solafter[[59]],solafter[[60]],solafter[[61]],solafter[[62]],solafter[[63]],solafter[[64]],solafter[[65]],solafter[[66]],solafter[[67]],solafter[[68]],solafter[[69]],solafter[[70]],solafter[[71]],solafter[[72]],solafter[[73]],solafter[[74]],solafter[[75]],solafter[[76]],solafter[[77]],solafter[[78]],solafter[[79]],solafter[[80]],solafter[[81]],solafter[[82]],solafter[[83]],solafter[[84]],solafter[[85]],solafter[[86]],solafter[[87]],solafter[[88]],solafter[[89]],solafter[[90]],solafter[[91]],solafter[[92]],solafter[[93]],solafter[[94]],solafter[[95]] ,solafter[[96]],solafter[[97]],solafter[[98]],solafter[[99]],solafter[[100]],solafter[[101]],solafter[[102]],solafter[[103]],solafter[[104]],solafter[[105]],solafter[[106]],solafter[[107]],solafter[[108]],solafter[[109]],solafter[[110]],solafter[[111]],  solafter[[112]],solafter[[113]],solafter[[114]],solafter[[115]] ,solafter[[116]],solafter[[117]],solafter[[118]],solafter[[119]],solafter[[120]],solafter[[121]],solafter[[122]],solafter[[123]],solafter[[124]],solafter[[125]],solafter[[126]],solafter[[127]],solafter[[128]],solafter[[129]],solafter[[130]],solafter[[131]],solafter[[132]],solafter[[133]],solafter[[134]],solafter[[135]],solafter[[136]],solafter[[137]],solafter[[138]],solafter[[139]],solafter[[140]],solafter[[141]],solafter[[142]],solafter[[143]],solafter[[144]],solafter[[145]],solafter[[146]],solafter[[147]],solafter[[148]],solafter[[149]],solafter[[150]],solafter[[151]],solafter[[152]],solafter[[153]],solafter[[154]],solafter[[155]],solafter[[156]],solafter[[157]],solafter[[158]],solafter[[159]],solafter[[160]],solafter[[161]],solafter[[162]],solafter[[163]],solafter[[164]],solafter[[165]],solafter[[166]],solafter[[167]],solafter[[168]],solafter[[169]],solafter[[170]],solafter[[171]],solafter[[172]],solafter[[173]],solafter[[174]],solafter[[175]],solafter[[176]],solafter[[177]])
solafter <- list()
for (i in 1:180) solafter[[i]]<-ode_results(new_points[i,])
par(mar = c(3, 3, 3, 3))
plot(solafter[[1]],solafter[[2]],solafter[[3]],solafter[[4]],solafter[[5]],solafter[[6]],solafter[[7]],solafter[[8]],solafter[[9]],solafter[[10]],solafter[[11]],solafter[[12]],solafter[[13]],solafter[[14]],solafter[[15]],solafter[[16]],solafter[[17]],solafter[[18]],solafter[[19]],solafter[[20]],solafter[[21]],solafter[[22]],solafter[[23]],solafter[[24]],solafter[[25]],solafter[[26]],solafter[[27]],solafter[[28]],solafter[[29]],solafter[[30]],solafter[[31]],solafter[[32]],solafter[[33]],solafter[[34]],solafter[[35]],solafter[[36]],solafter[[37]],solafter[[38]],solafter[[39]],solafter[[40]],solafter[[41]],solafter[[42]],solafter[[43]],solafter[[44]],solafter[[45]],solafter[[46]],solafter[[47]],solafter[[48]],solafter[[49]],solafter[[50]],solafter[[51]],solafter[[52]],solafter[[53]],solafter[[54]],solafter[[55]],solafter[[56]],solafter[[57]],solafter[[58]],solafter[[59]],solafter[[60]],solafter[[61]],solafter[[62]],solafter[[63]],solafter[[64]],solafter[[65]],solafter[[66]],solafter[[67]],solafter[[68]],solafter[[69]],solafter[[70]],solafter[[71]],solafter[[72]],solafter[[73]],solafter[[74]],solafter[[75]],solafter[[76]],solafter[[77]],solafter[[78]],solafter[[79]],solafter[[80]],solafter[[81]],solafter[[82]],solafter[[83]],solafter[[84]],solafter[[85]],solafter[[86]],solafter[[87]],solafter[[88]],solafter[[89]],solafter[[90]],solafter[[91]],solafter[[92]],solafter[[93]],solafter[[94]],solafter[[95]] ,solafter[[96]],solafter[[97]],solafter[[98]],solafter[[99]],solafter[[100]],solafter[[101]],solafter[[102]],solafter[[103]],solafter[[104]],solafter[[105]],solafter[[106]],solafter[[107]],solafter[[108]],solafter[[109]],solafter[[110]],solafter[[111]],  solafter[[112]],solafter[[113]],solafter[[114]],solafter[[115]] ,solafter[[116]],solafter[[117]],solafter[[118]],solafter[[119]],solafter[[120]],solafter[[121]],solafter[[122]],solafter[[123]],solafter[[124]],solafter[[125]],solafter[[126]],solafter[[127]],solafter[[128]],solafter[[129]],solafter[[130]],solafter[[131]],solafter[[132]],solafter[[133]],solafter[[134]],solafter[[135]],solafter[[136]],solafter[[137]],solafter[[138]],solafter[[139]],solafter[[140]],solafter[[141]],solafter[[142]],solafter[[143]],solafter[[144]],solafter[[145]],solafter[[146]],solafter[[147]],solafter[[148]],solafter[[149]],solafter[[150]],solafter[[151]],solafter[[152]],solafter[[153]],solafter[[154]],solafter[[155]],solafter[[156]],solafter[[157]],solafter[[158]],solafter[[159]],solafter[[160]],solafter[[161]],solafter[[162]],solafter[[163]],solafter[[164]],solafter[[165]],solafter[[166]],solafter[[167]],solafter[[168]],solafter[[169]],solafter[[170]],solafter[[171]],solafter[[172]],solafter[[173]],solafter[[174]],solafter[[175]],solafter[[176]],solafter[[177]],solafter[[178]])
plot(sol[[1]],sol[[2]],sol[[3]],sol[[4]],sol[[5]],sol[[6]],sol[[7]],sol[[8]],sol[[9]],sol[[10]],solafter[[7]],solafter[[8]],solafter[[9]],solafter[[10]], lty=1, col=c("black","black","black","black","black","black","black","black","black","black","red","red","red","red","red"))
plot(sol[[1]],sol[[2]], solafter[[7]], col=c("blue","red","red"), lty=1)
plot(lty=1, col=c(rep("black",180),rep("red",178)), sol[[1]],sol[[2]],sol[[3]],sol[[4]],sol[[5]],sol[[6]],sol[[7]],sol[[8]],sol[[9]],sol[[10]],sol[[11]],sol[[12]],sol[[13]],sol[[14]],sol[[15]],sol[[16]],sol[[17]],sol[[18]],sol[[19]],sol[[20]],sol[[21]],sol[[22]],sol[[23]],sol[[24]],sol[[25]],sol[[26]],sol[[27]],sol[[28]],sol[[29]],sol[[30]],sol[[31]],sol[[32]],sol[[33]],sol[[34]],sol[[35]],sol[[36]],sol[[37]],sol[[38]],sol[[39]],sol[[40]],sol[[41]],sol[[42]],sol[[43]],sol[[44]],sol[[45]],sol[[46]],sol[[47]],sol[[48]],sol[[49]],sol[[50]],sol[[51]],sol[[52]],sol[[53]],sol[[54]],sol[[55]],sol[[56]],sol[[57]],sol[[58]],sol[[59]],sol[[60]],sol[[61]],sol[[62]],sol[[63]],sol[[64]],sol[[65]],sol[[66]],sol[[67]],sol[[68]],sol[[69]],sol[[70]],sol[[71]],sol[[72]],sol[[73]],sol[[74]],sol[[75]],sol[[76]],sol[[77]],sol[[78]],sol[[79]],sol[[80]],sol[[81]],sol[[82]],sol[[83]],sol[[84]],sol[[85]],sol[[86]],sol[[87]],sol[[88]],sol[[89]],sol[[90]],sol[[91]],sol[[92]],sol[[93]],sol[[94]],sol[[95]] ,sol[[96]],sol[[97]],sol[[98]],sol[[99]],sol[[100]],sol[[101]],sol[[102]],sol[[103]],sol[[104]],sol[[105]],sol[[106]],sol[[107]],sol[[108]],sol[[109]],sol[[110]],sol[[111]],  sol[[112]],sol[[113]],sol[[114]],sol[[115]] ,sol[[116]],sol[[117]],sol[[118]],sol[[119]],sol[[120]],sol[[121]],sol[[122]],sol[[123]],sol[[124]],sol[[125]],sol[[126]],sol[[127]],sol[[128]],sol[[129]],sol[[130]],sol[[131]],sol[[132]],sol[[133]],sol[[134]],sol[[135]],sol[[136]],sol[[137]],sol[[138]],sol[[139]],sol[[140]],sol[[141]],sol[[142]],sol[[143]],sol[[144]],sol[[145]],sol[[146]],sol[[147]],sol[[148]],sol[[149]],sol[[150]],sol[[151]],sol[[152]],sol[[153]],sol[[154]],sol[[155]],sol[[156]],sol[[157]],sol[[158]],sol[[159]],sol[[160]],sol[[161]],sol[[162]],sol[[163]],sol[[164]],sol[[165]],sol[[166]],sol[[167]],sol[[168]],sol[[169]],sol[[170]],sol[[171]],sol[[172]],sol[[173]],sol[[174]],sol[[175]],sol[[176]],sol[[177]],sol[[178]],sol[[179]],sol[[180]],solafter[[1]],solafter[[2]],solafter[[3]],solafter[[4]],solafter[[5]],solafter[[6]],solafter[[7]],solafter[[8]],solafter[[9]],solafter[[10]],solafter[[11]],solafter[[12]],solafter[[13]],solafter[[14]],solafter[[15]],solafter[[16]],solafter[[17]],solafter[[18]],solafter[[19]],solafter[[20]],solafter[[21]],solafter[[22]],solafter[[23]],solafter[[24]],solafter[[25]],solafter[[26]],solafter[[27]],solafter[[28]],solafter[[29]],solafter[[30]],solafter[[31]],solafter[[32]],solafter[[33]],solafter[[34]],solafter[[35]],solafter[[36]],solafter[[37]],solafter[[38]],solafter[[39]],solafter[[40]],solafter[[41]],solafter[[42]],solafter[[43]],solafter[[44]],solafter[[45]],solafter[[46]],solafter[[47]],solafter[[48]],solafter[[49]],solafter[[50]],solafter[[51]],solafter[[52]],solafter[[53]],solafter[[54]],solafter[[55]],solafter[[56]],solafter[[57]],solafter[[58]],solafter[[59]],solafter[[60]],solafter[[61]],solafter[[62]],solafter[[63]],solafter[[64]],solafter[[65]],solafter[[66]],solafter[[67]],solafter[[68]],solafter[[69]],solafter[[70]],solafter[[71]],solafter[[72]],solafter[[73]],solafter[[74]],solafter[[75]],solafter[[76]],solafter[[77]],solafter[[78]],solafter[[79]],solafter[[80]],solafter[[81]],solafter[[82]],solafter[[83]],solafter[[84]],solafter[[85]],solafter[[86]],solafter[[87]],solafter[[88]],solafter[[89]],solafter[[90]],solafter[[91]],solafter[[92]],solafter[[93]],solafter[[94]],solafter[[95]] ,solafter[[96]],solafter[[97]],solafter[[98]],solafter[[99]],solafter[[100]],solafter[[101]],solafter[[102]],solafter[[103]],solafter[[104]],solafter[[105]],solafter[[106]],solafter[[107]],solafter[[108]],solafter[[109]],solafter[[110]],solafter[[111]],  solafter[[112]],solafter[[113]],solafter[[114]],solafter[[115]] ,solafter[[116]],solafter[[117]],solafter[[118]],solafter[[119]],solafter[[120]],solafter[[121]],solafter[[122]],solafter[[123]],solafter[[124]],solafter[[125]],solafter[[126]],solafter[[127]],solafter[[128]],solafter[[129]],solafter[[130]],solafter[[131]],solafter[[132]],solafter[[133]],solafter[[134]],solafter[[135]],solafter[[136]],solafter[[137]],solafter[[138]],solafter[[139]],solafter[[140]],solafter[[141]],solafter[[142]],solafter[[143]],solafter[[144]],solafter[[145]],solafter[[146]],solafter[[147]],solafter[[148]],solafter[[149]],solafter[[150]],solafter[[151]],solafter[[152]],solafter[[153]],solafter[[154]],solafter[[155]],solafter[[156]],solafter[[157]],solafter[[158]],solafter[[159]],solafter[[160]],solafter[[161]],solafter[[162]],solafter[[163]],solafter[[164]],solafter[[165]],solafter[[166]],solafter[[167]],solafter[[168]],solafter[[169]],solafter[[170]],solafter[[171]],solafter[[172]],solafter[[173]],solafter[[174]],solafter[[175]],solafter[[176]],solafter[[177]])
solafter <- list()
solafter <- list()
for (i in 1:180) solafter[[i]]<-ode_results(new_points[i,])
par(mar = c(3, 3, 3, 3))
plot(solafter[[1]],solafter[[2]],solafter[[3]],solafter[[4]],solafter[[5]],solafter[[6]],solafter[[7]],solafter[[8]],solafter[[9]],solafter[[10]],solafter[[11]],solafter[[12]],solafter[[13]],solafter[[14]],solafter[[15]],solafter[[16]],solafter[[17]],solafter[[18]],solafter[[19]],solafter[[20]],solafter[[21]],solafter[[22]],solafter[[23]],solafter[[24]],solafter[[25]],solafter[[26]],solafter[[27]],solafter[[28]],solafter[[29]],solafter[[30]],solafter[[31]],solafter[[32]],solafter[[33]],solafter[[34]],solafter[[35]],solafter[[36]],solafter[[37]],solafter[[38]],solafter[[39]],solafter[[40]],solafter[[41]],solafter[[42]],solafter[[43]],solafter[[44]],solafter[[45]],solafter[[46]],solafter[[47]],solafter[[48]],solafter[[49]],solafter[[50]],solafter[[51]],solafter[[52]],solafter[[53]],solafter[[54]],solafter[[55]],solafter[[56]],solafter[[57]],solafter[[58]],solafter[[59]],solafter[[60]],solafter[[61]],solafter[[62]],solafter[[63]],solafter[[64]],solafter[[65]],solafter[[66]],solafter[[67]],solafter[[68]],solafter[[69]],solafter[[70]],solafter[[71]],solafter[[72]],solafter[[73]],solafter[[74]],solafter[[75]],solafter[[76]],solafter[[77]],solafter[[78]],solafter[[79]],solafter[[80]],solafter[[81]],solafter[[82]],solafter[[83]],solafter[[84]],solafter[[85]],solafter[[86]],solafter[[87]],solafter[[88]],solafter[[89]],solafter[[90]],solafter[[91]],solafter[[92]],solafter[[93]],solafter[[94]],solafter[[95]] ,solafter[[96]],solafter[[97]],solafter[[98]],solafter[[99]],solafter[[100]],solafter[[101]],solafter[[102]],solafter[[103]],solafter[[104]],solafter[[105]],solafter[[106]],solafter[[107]],solafter[[108]],solafter[[109]],solafter[[110]],solafter[[111]],  solafter[[112]],solafter[[113]],solafter[[114]],solafter[[115]] ,solafter[[116]],solafter[[117]],solafter[[118]],solafter[[119]],solafter[[120]],solafter[[121]],solafter[[122]],solafter[[123]],solafter[[124]],solafter[[125]],solafter[[126]],solafter[[127]],solafter[[128]],solafter[[129]],solafter[[130]],solafter[[131]],solafter[[132]],solafter[[133]],solafter[[134]],solafter[[135]],solafter[[136]],solafter[[137]],solafter[[138]],solafter[[139]],solafter[[140]],solafter[[141]],solafter[[142]],solafter[[143]],solafter[[144]],solafter[[145]],solafter[[146]],solafter[[147]],solafter[[148]],solafter[[149]],solafter[[150]],solafter[[151]],solafter[[152]],solafter[[153]],solafter[[154]],solafter[[155]],solafter[[156]],solafter[[157]],solafter[[158]],solafter[[159]],solafter[[160]],solafter[[161]],solafter[[162]],solafter[[163]],solafter[[164]],solafter[[165]],solafter[[166]],solafter[[167]],solafter[[168]],solafter[[169]],solafter[[170]],solafter[[171]],solafter[[172]],solafter[[173]],solafter[[174]],solafter[[175]],solafter[[176]],solafter[[177]],solafter[[178]])
sol <- list()
for (i in 1:180) sol[[i]]<-ode_results(initial_points[i,])
par(mar = c(3, 3, 3, 3))
plot(sol[[1]],sol[[2]],sol[[3]],sol[[4]],sol[[5]],sol[[6]],sol[[7]],sol[[8]],sol[[9]],sol[[10]],sol[[11]],sol[[12]],sol[[13]],sol[[14]],sol[[15]],sol[[16]],sol[[17]],sol[[18]],sol[[19]],sol[[20]],sol[[21]],sol[[22]],sol[[23]],sol[[24]],sol[[25]],sol[[26]],sol[[27]],sol[[28]],sol[[29]],sol[[30]],sol[[31]],sol[[32]],sol[[33]],sol[[34]],sol[[35]],sol[[36]],sol[[37]],sol[[38]],sol[[39]],sol[[40]],sol[[41]],sol[[42]],sol[[43]],sol[[44]],sol[[45]],sol[[46]],sol[[47]],sol[[48]],sol[[49]],sol[[50]],sol[[51]],sol[[52]],sol[[53]],sol[[54]],sol[[55]],sol[[56]],sol[[57]],sol[[58]],sol[[59]],sol[[60]],sol[[61]],sol[[62]],sol[[63]],sol[[64]],sol[[65]],sol[[66]],sol[[67]],sol[[68]],sol[[69]],sol[[70]],sol[[71]],sol[[72]],sol[[73]],sol[[74]],sol[[75]],sol[[76]],sol[[77]],sol[[78]],sol[[79]],sol[[80]],sol[[81]],sol[[82]],sol[[83]],sol[[84]],sol[[85]],sol[[86]],sol[[87]],sol[[88]],sol[[89]],sol[[90]],sol[[91]],sol[[92]],sol[[93]],sol[[94]],sol[[95]] ,sol[[96]],sol[[97]],sol[[98]],sol[[99]],sol[[100]],sol[[101]],sol[[102]],sol[[103]],sol[[104]],sol[[105]],sol[[106]],sol[[107]],sol[[108]],sol[[109]],sol[[110]],sol[[111]],  sol[[112]],sol[[113]],sol[[114]],sol[[115]] ,sol[[116]],sol[[117]],sol[[118]],sol[[119]],sol[[120]],sol[[121]],sol[[122]],sol[[123]],sol[[124]],sol[[125]],sol[[126]],sol[[127]],sol[[128]],sol[[129]],sol[[130]],sol[[131]],sol[[132]],sol[[133]],sol[[134]],sol[[135]],sol[[136]],sol[[137]],sol[[138]],sol[[139]],sol[[140]],sol[[141]],sol[[142]],sol[[143]],sol[[144]],sol[[145]],sol[[146]],sol[[147]],sol[[148]],sol[[149]],sol[[150]],sol[[151]],sol[[152]],sol[[153]],sol[[154]],sol[[155]],sol[[156]],sol[[157]],sol[[158]],sol[[159]],sol[[160]],sol[[161]],sol[[162]],sol[[163]],sol[[164]],sol[[165]],sol[[166]],sol[[167]],sol[[168]],sol[[169]],sol[[170]],sol[[171]],sol[[172]],sol[[173]],sol[[174]],sol[[175]],sol[[176]],sol[[177]],sol[[178]],sol[[179]],sol[[180]], main="wave0 model evaluations")
solafter <- list()
for (i in 1:180) solafter[[i]]<-ode_results(new_points[i,])
par(mar = c(3, 3, 3, 3))
plot(solafter[[1]],solafter[[2]],solafter[[3]],solafter[[4]],solafter[[5]],solafter[[6]],solafter[[7]],solafter[[8]],solafter[[9]],solafter[[10]],solafter[[11]],solafter[[12]],solafter[[13]],solafter[[14]],solafter[[15]],solafter[[16]],solafter[[17]],solafter[[18]],solafter[[19]],solafter[[20]],solafter[[21]],solafter[[22]],solafter[[23]],solafter[[24]],solafter[[25]],solafter[[26]],solafter[[27]],solafter[[28]],solafter[[29]],solafter[[30]],solafter[[31]],solafter[[32]],solafter[[33]],solafter[[34]],solafter[[35]],solafter[[36]],solafter[[37]],solafter[[38]],solafter[[39]],solafter[[40]],solafter[[41]],solafter[[42]],solafter[[43]],solafter[[44]],solafter[[45]],solafter[[46]],solafter[[47]],solafter[[48]],solafter[[49]],solafter[[50]],solafter[[51]],solafter[[52]],solafter[[53]],solafter[[54]],solafter[[55]],solafter[[56]],solafter[[57]],solafter[[58]],solafter[[59]],solafter[[60]],solafter[[61]],solafter[[62]],solafter[[63]],solafter[[64]],solafter[[65]],solafter[[66]],solafter[[67]],solafter[[68]],solafter[[69]],solafter[[70]],solafter[[71]],solafter[[72]],solafter[[73]],solafter[[74]],solafter[[75]],solafter[[76]],solafter[[77]],solafter[[78]],solafter[[79]],solafter[[80]],solafter[[81]],solafter[[82]],solafter[[83]],solafter[[84]],solafter[[85]],solafter[[86]],solafter[[87]],solafter[[88]],solafter[[89]],solafter[[90]],solafter[[91]],solafter[[92]],solafter[[93]],solafter[[94]],solafter[[95]] ,solafter[[96]],solafter[[97]],solafter[[98]],solafter[[99]],solafter[[100]],solafter[[101]],solafter[[102]],solafter[[103]],solafter[[104]],solafter[[105]],solafter[[106]],solafter[[107]],solafter[[108]],solafter[[109]],solafter[[110]],solafter[[111]],  solafter[[112]],solafter[[113]],solafter[[114]],solafter[[115]] ,solafter[[116]],solafter[[117]],solafter[[118]],solafter[[119]],solafter[[120]],solafter[[121]],solafter[[122]],solafter[[123]],solafter[[124]],solafter[[125]],solafter[[126]],solafter[[127]],solafter[[128]],solafter[[129]],solafter[[130]],solafter[[131]],solafter[[132]],solafter[[133]],solafter[[134]],solafter[[135]],solafter[[136]],solafter[[137]],solafter[[138]],solafter[[139]],solafter[[140]],solafter[[141]],solafter[[142]],solafter[[143]],solafter[[144]],solafter[[145]],solafter[[146]],solafter[[147]],solafter[[148]],solafter[[149]],solafter[[150]],solafter[[151]],solafter[[152]],solafter[[153]],solafter[[154]],solafter[[155]],solafter[[156]],solafter[[157]],solafter[[158]],solafter[[159]],solafter[[160]],solafter[[161]],solafter[[162]],solafter[[163]],solafter[[164]],solafter[[165]],solafter[[166]],solafter[[167]],solafter[[168]],solafter[[169]],solafter[[170]],solafter[[171]],solafter[[172]],solafter[[173]],solafter[[174]],solafter[[175]],solafter[[176]],solafter[[177]],solafter[[178]])
sol <- list()
for (i in 1:180) sol[[i]]<-ode_results(initial_points[i,])
par(mar = c(3, 3, 3, 3))
plot(sol[[1]],sol[[2]],sol[[3]],sol[[4]],sol[[5]],sol[[6]],sol[[7]],sol[[8]],sol[[9]],sol[[10]],sol[[11]],sol[[12]],sol[[13]],sol[[14]],sol[[15]],sol[[16]],sol[[17]],sol[[18]],sol[[19]],sol[[20]],sol[[21]],sol[[22]],sol[[23]],sol[[24]],sol[[25]],sol[[26]],sol[[27]],sol[[28]],sol[[29]],sol[[30]],sol[[31]],sol[[32]],sol[[33]],sol[[34]],sol[[35]],sol[[36]],sol[[37]],sol[[38]],sol[[39]],sol[[40]],sol[[41]],sol[[42]],sol[[43]],sol[[44]],sol[[45]],sol[[46]],sol[[47]],sol[[48]],sol[[49]],sol[[50]],sol[[51]],sol[[52]],sol[[53]],sol[[54]],sol[[55]],sol[[56]],sol[[57]],sol[[58]],sol[[59]],sol[[60]],sol[[61]],sol[[62]],sol[[63]],sol[[64]],sol[[65]],sol[[66]],sol[[67]],sol[[68]],sol[[69]],sol[[70]],sol[[71]],sol[[72]],sol[[73]],sol[[74]],sol[[75]],sol[[76]],sol[[77]],sol[[78]],sol[[79]],sol[[80]],sol[[81]],sol[[82]],sol[[83]],sol[[84]],sol[[85]],sol[[86]],sol[[87]],sol[[88]],sol[[89]],sol[[90]],sol[[91]],sol[[92]],sol[[93]],sol[[94]],sol[[95]] ,sol[[96]],sol[[97]],sol[[98]],sol[[99]],sol[[100]],sol[[101]],sol[[102]],sol[[103]],sol[[104]],sol[[105]],sol[[106]],sol[[107]],sol[[108]],sol[[109]],sol[[110]],sol[[111]],  sol[[112]],sol[[113]],sol[[114]],sol[[115]] ,sol[[116]],sol[[117]],sol[[118]],sol[[119]],sol[[120]],sol[[121]],sol[[122]],sol[[123]],sol[[124]],sol[[125]],sol[[126]],sol[[127]],sol[[128]],sol[[129]],sol[[130]],sol[[131]],sol[[132]],sol[[133]],sol[[134]],sol[[135]],sol[[136]],sol[[137]],sol[[138]],sol[[139]],sol[[140]],sol[[141]],sol[[142]],sol[[143]],sol[[144]],sol[[145]],sol[[146]],sol[[147]],sol[[148]],sol[[149]],sol[[150]],sol[[151]],sol[[152]],sol[[153]],sol[[154]],sol[[155]],sol[[156]],sol[[157]],sol[[158]],sol[[159]],sol[[160]],sol[[161]],sol[[162]],sol[[163]],sol[[164]],sol[[165]],sol[[166]],sol[[167]],sol[[168]],sol[[169]],sol[[170]],sol[[171]],sol[[172]],sol[[173]],sol[[174]],sol[[175]],sol[[176]],sol[[177]],sol[[178]],sol[[179]],sol[[180]])
plot_runs <- function(points){
sol <- list()
for (i in 1:180) sol[[i]]<-ode_results(points[i,])
par(mar = c(3, 3, 3, 3))
plot(sol[[1]],sol[[2]],sol[[3]],sol[[4]],sol[[5]],sol[[6]],sol[[7]],sol[[8]],sol[[9]],sol[[10]],sol[[11]],sol[[12]],sol[[13]],sol[[14]],sol[[15]],sol[[16]],sol[[17]],sol[[18]],sol[[19]],sol[[20]],sol[[21]],sol[[22]],sol[[23]],sol[[24]],sol[[25]],sol[[26]],sol[[27]],sol[[28]],sol[[29]],sol[[30]],sol[[31]],sol[[32]],sol[[33]],sol[[34]],sol[[35]],sol[[36]],sol[[37]],sol[[38]],sol[[39]],sol[[40]],sol[[41]],sol[[42]],sol[[43]],sol[[44]],sol[[45]],sol[[46]],sol[[47]],sol[[48]],sol[[49]],sol[[50]],sol[[51]],sol[[52]],sol[[53]],sol[[54]],sol[[55]],sol[[56]],sol[[57]],sol[[58]],sol[[59]],sol[[60]],sol[[61]],sol[[62]],sol[[63]],sol[[64]],sol[[65]],sol[[66]],sol[[67]],sol[[68]],sol[[69]],sol[[70]],sol[[71]],sol[[72]],sol[[73]],sol[[74]],sol[[75]],sol[[76]],sol[[77]],sol[[78]],sol[[79]],sol[[80]],sol[[81]],sol[[82]],sol[[83]],sol[[84]],sol[[85]],sol[[86]],sol[[87]],sol[[88]],sol[[89]],sol[[90]],sol[[91]],sol[[92]],sol[[93]],sol[[94]],sol[[95]] ,sol[[96]],sol[[97]],sol[[98]],sol[[99]],sol[[100]],sol[[101]],sol[[102]],sol[[103]],sol[[104]],sol[[105]],sol[[106]],sol[[107]],sol[[108]],sol[[109]],sol[[110]],sol[[111]],  sol[[112]],sol[[113]],sol[[114]],sol[[115]] ,sol[[116]],sol[[117]],sol[[118]],sol[[119]],sol[[120]],sol[[121]],sol[[122]],sol[[123]],sol[[124]],sol[[125]],sol[[126]],sol[[127]],sol[[128]],sol[[129]],sol[[130]],sol[[131]],sol[[132]],sol[[133]],sol[[134]],sol[[135]],sol[[136]],sol[[137]],sol[[138]],sol[[139]],sol[[140]],sol[[141]],sol[[142]],sol[[143]],sol[[144]],sol[[145]],sol[[146]],sol[[147]],sol[[148]],sol[[149]],sol[[150]],sol[[151]],sol[[152]],sol[[153]],sol[[154]],sol[[155]],sol[[156]],sol[[157]],sol[[158]],sol[[159]],sol[[160]],sol[[161]],sol[[162]],sol[[163]],sol[[164]],sol[[165]],sol[[166]],sol[[167]],sol[[168]],sol[[169]],sol[[170]],sol[[171]],sol[[172]],sol[[173]],sol[[174]],sol[[175]],sol[[176]],sol[[177]],sol[[178]],sol[[179]],sol[[180]])
}
plot_runs(initial_points)
plot_runs(initial_points)
plot_runs(new_points)
plot_runs(new_new_points)
plot_runs(new_new_points[1:50,])
